<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Dev | Gorille Gris]]></title>
  <link href="http://ptitgraig.github.io/blog/categories/dev/atom.xml" rel="self"/>
  <link href="http://ptitgraig.github.io/"/>
  <updated>2015-01-14T15:41:30+01:00</updated>
  <id>http://ptitgraig.github.io/</id>
  <author>
    <name><![CDATA[Grégory Pelletey]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Introduction au test unitaire JavaScript]]></title>
    <link href="http://ptitgraig.github.io/blog/2015/01/08/introduction-au-test-unitaire-javascript/"/>
    <updated>2015-01-08T17:46:00+01:00</updated>
    <id>http://ptitgraig.github.io/blog/2015/01/08/introduction-au-test-unitaire-javascript</id>
    <content type="html"><![CDATA[<p class="foreword">
Traduction de l'article du Smashing Magazine : Introduction To JavaScript Unit Testing, écrit par Jörn Zaefferer en Juillet 2012.
</p>
<!-- more -->

<p class="disclaimer">
<a href="https://github.com/ptitgraig/first-step-unit-js-tests">Le code étape par étape est disponible sur GitHub.</a>
</p>

<p>Vous savez probablement que le test est une bonne chose, mais le premier obstacle à surmonter en essayant d’écrire des tests unitaires pour du code client est le manque de toutes les unités; le code JavaScript est écrit pour chaque page d’un site Web ou chaque module d’une application et est étroitement mélangés avec la logique back-end et le HTML correspondant. Dans le pire des cas, le code est complètement mélangé avec le langage HTML, comme les gestionnaires d’événements directement dans le markup.</p>

<p>Ce est probablement le cas lorsqu’on utilise aucune bibliothèque JavaScript, qui permettrait une abstraction du DOM; l’écriture de gestionnaires d’événements directement dans le markup est beaucoup plus facile que d’utiliser les API DOM pour lier ces événements.
De plus en plus de développeurs choisissent une bibliothèque comme jQuery pour gérer l’abstraction du DOM. Ceci leur permet de déplacer la gestion des ces événements dans un script distinct, soit sur ​​la même page ou dans un fichier JavaScript à part. Toutefois, mettre le code dans des fichiers séparés ne signifie pas qu’il est prêt à être testé unitairement.</p>

<p>Qu’est ce qu’une unité de toute façon? Dans le meilleur des cas, c’est une fonction que vous pouvez gérer de différentes façon - une fonction qui vous donne toujours le même résultat pour une entrée donnée. C’est ce qui rend les tests unitaires assez facile, mais la plupart du temps il faut gérer les effets secondaires, entre autre : la manipulations du DOM. Il est utile de trouver quelles sont ces unités qui permettront la structure de notre code et de construire les tests unitaire en conséquence.</p>

<h2 id="construire-des-tests-unitaires">Construire des tests unitaires</h2>

<p>Cela étant dit, commencer avec les tests unitaires est bien plus facile quand on commence de rien. Mais cet article ne parle pas de ce cas là. Cet article est là pour vous aider sur le problème le plus difficile : partir sur du code existant, en tester les parties importantes et éventuellement en corriger les bugs.</p>

<p>Le processus d’extraction de code et de son changement de forme, sans en modifier son comportement, est appelé refactorisation. C’est une excellente méthode pour améliorer la manière dont le code est conçu un programme. Et puisque la moindre modification peut potentiellement changer le comportement du programme, il est plus sûr de le faire quand les tests unitaires sont en place.</p>

<p>Cela veut dire que pour ajouter des tests unitaire, vous devez prendre le risque de casser des choses : c’est le problème de l’oeuf et de la poule (qui est venu le premier ?). Donc, avant que vous ayez une bonne couverture de test unitaire, vous devez continuer à tester manuellement pour minimiser le risque de régression.</p>

<p>Assez de théorie ! Passons à la pratique : tester du code JavaScript mélangé au HTML et relié à une page. Ce code a pour but de chercher tous les liens qui possède un attribut <code>title</code>. Ces attributs <code>title</code> sont utilisés pour afficher, quand quelque chose a été posté, une date relative du genre <em>il y a 5 jours</em> :</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="tag">&lt;html&gt;</span>
<span class="tag">&lt;head&gt;</span>
    <span class="tag">&lt;meta</span> <span class="attribute-name">http-equiv</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">Content-Type</span><span class="delimiter">&quot;</span></span> <span class="attribute-name">content</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">text/html; charset=UTF-8</span><span class="delimiter">&quot;</span></span> <span class="tag">/&gt;</span>
    <span class="tag">&lt;title&gt;</span>Test unitaire sur date<span class="tag">&lt;/title&gt;</span>
    <span class="tag">&lt;script&gt;</span>
<span class="inline">    <span class="keyword">function</span> <span class="function">prettyDate</span>(time){
        <span class="keyword">var</span> date = <span class="keyword">new</span> Date(time || <span class="string"><span class="delimiter">&quot;</span><span class="delimiter">&quot;</span></span>),
            diff = ((<span class="keyword">new</span> Date().getTime() - date.getTime()) / <span class="integer">1000</span>),
            day_diff = Math.floor(diff / <span class="integer">86400</span>);

        <span class="keyword">if</span> (isNaN(day_diff) || day_diff &lt; <span class="integer">0</span> || day_diff &gt;= <span class="integer">31</span>) {
            <span class="keyword">return</span>;
        }

        <span class="keyword">return</span> day_diff == <span class="integer">0</span> &amp;&amp; (
                diff &lt; <span class="integer">60</span> &amp;&amp; <span class="string"><span class="delimiter">&quot;</span><span class="content">à l'instant</span><span class="delimiter">&quot;</span></span> ||
                diff &lt; <span class="integer">120</span> &amp;&amp; <span class="string"><span class="delimiter">&quot;</span><span class="content">1 minute</span><span class="delimiter">&quot;</span></span> ||
                diff &lt; <span class="integer">3600</span> &amp;&amp; Math.floor( diff / <span class="integer">60</span> ) + <span class="string"><span class="delimiter">&quot;</span><span class="content"> minutes</span><span class="delimiter">&quot;</span></span> ||
                diff &lt; <span class="integer">7200</span> &amp;&amp; <span class="string"><span class="delimiter">&quot;</span><span class="content">1 heure</span><span class="delimiter">&quot;</span></span> ||
                diff &lt; <span class="integer">86400</span> &amp;&amp; Math.floor( diff / <span class="integer">3600</span> ) + <span class="string"><span class="delimiter">&quot;</span><span class="content"> heures</span><span class="delimiter">&quot;</span></span>) ||
            day_diff == <span class="integer">1</span> &amp;&amp; <span class="string"><span class="delimiter">&quot;</span><span class="content">Hier</span><span class="delimiter">&quot;</span></span> ||
            day_diff &lt; <span class="integer">7</span> &amp;&amp; day_diff + <span class="string"><span class="delimiter">&quot;</span><span class="content"> days ago</span><span class="delimiter">&quot;</span></span> ||
            day_diff &lt; <span class="integer">31</span> &amp;&amp; Math.ceil( day_diff / <span class="integer">7</span> ) + <span class="string"><span class="delimiter">&quot;</span><span class="content"> semaines</span><span class="delimiter">&quot;</span></span>;
    }
    window.<span class="function">onload</span> = <span class="keyword">function</span>(){
        <span class="keyword">var</span> links = document.getElementsByTagName(<span class="string"><span class="delimiter">&quot;</span><span class="content">a</span><span class="delimiter">&quot;</span></span>);
        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="integer">0</span>; i &lt; links.length; i++) {
            <span class="keyword">if</span> (links[i].title) {
                <span class="keyword">var</span> date = prettyDate(links[i].title);
                <span class="keyword">if</span> (date) {
                    links[i].innerHTML = date;
                }
            }
        }
    };</span>
    <span class="tag">&lt;/script&gt;</span>
<span class="tag">&lt;/head&gt;</span>
<span class="tag">&lt;body&gt;</span>

<span class="tag">&lt;ul&gt;</span>
<span class="tag">&lt;li</span> <span class="attribute-name">class</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">entry</span><span class="delimiter">&quot;</span></span> <span class="attribute-name">id</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">post57</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span>
    <span class="tag">&lt;p&gt;</span>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Curabitur dignissim quis libero eu lobortis. <span class="tag">&lt;/p&gt;</span>
    <span class="tag">&lt;small</span> <span class="attribute-name">class</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">extra</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span>
        Posté il y a <span class="tag">&lt;a</span> <span class="attribute-name">href</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">http://ptitgraig.github.io/2008/01/blah/57/</span><span class="delimiter">&quot;</span></span> <span class="attribute-name">title</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">2008-01-28T21:24:17Z</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span>January 28th, 2008<span class="tag">&lt;/a&gt;</span>
        par <span class="tag">&lt;a</span> <span class="attribute-name">href</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">http://ptitgraig.github.io/john/</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span>John Resig<span class="tag">&lt;/a&gt;</span>
    <span class="tag">&lt;/small&gt;</span>
<span class="tag">&lt;/li&gt;</span>
<span class="comment">&lt;!-- more list items --&gt;</span>
<span class="tag">&lt;/ul&gt;</span>

<span class="tag">&lt;/body&gt;</span>
<span class="tag">&lt;/html&gt;</span>
</pre></div>
</div>
</div>

<p>Si vous exécuter cet exemple dans une navigateur, vous remarquerez un problème : aucune date n’est remplacée. Le code fonctionne cependant correctement. Il boucle bien sur tous les liens de la page et vérifie, pour chacun, si l’attribut <code>title</code> est présent. Si il y en a bien un, il passe dans la fonction <code>prettyDate</code>. Si <code>prettyDate</code> renvoie un résultat, le innerHTML du lien est mis à jour avec ce résultat.</p>

<h2 id="rendre-le-code-testable">Rendre le code testable</h2>

<p>Le problème est que pour toute date antérieure à 31 jours, <code>prettyDate</code> renvoie juste <code>undefined</code> (implicitement, avec <code>return</code>), laissant ainsi tel quel le texte du lien. Donc, pour voir ce qui est censé se produire, on doit en dur une date actuelle :</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="tag">&lt;html&gt;</span>
<span class="tag">&lt;head&gt;</span>
    <span class="tag">&lt;meta</span> <span class="attribute-name">http-equiv</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">Content-Type</span><span class="delimiter">&quot;</span></span> <span class="attribute-name">content</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">text/html; charset=UTF-8</span><span class="delimiter">&quot;</span></span> <span class="tag">/&gt;</span>
    <span class="tag">&lt;title&gt;</span>Test unitaire sur date<span class="tag">&lt;/title&gt;</span>
    <span class="tag">&lt;script&gt;</span>
<span class="inline">    <span class="keyword">function</span> <span class="function">prettyDate</span>(now, time){
        <span class="keyword">var</span> date = <span class="keyword">new</span> Date(time || <span class="string"><span class="delimiter">&quot;</span><span class="delimiter">&quot;</span></span>),
            diff = (((<span class="keyword">new</span> Date(now)).getTime() - date.getTime()) / <span class="integer">1000</span>),
            day_diff = Math.floor(diff / <span class="integer">86400</span>);

        <span class="keyword">if</span> (isNaN(day_diff) || day_diff &lt; <span class="integer">0</span> || day_diff &gt;= <span class="integer">31</span>) {
            <span class="keyword">return</span>;
        }

        <span class="keyword">return</span> day_diff == <span class="integer">0</span> &amp;&amp; (
                diff &lt; <span class="integer">60</span> &amp;&amp; <span class="string"><span class="delimiter">&quot;</span><span class="content">à l'instant</span><span class="delimiter">&quot;</span></span> ||
                diff &lt; <span class="integer">120</span> &amp;&amp; <span class="string"><span class="delimiter">&quot;</span><span class="content">1 minute</span><span class="delimiter">&quot;</span></span> ||
                diff &lt; <span class="integer">3600</span> &amp;&amp; Math.floor( diff / <span class="integer">60</span> ) + <span class="string"><span class="delimiter">&quot;</span><span class="content"> minutes</span><span class="delimiter">&quot;</span></span> ||
                diff &lt; <span class="integer">7200</span> &amp;&amp; <span class="string"><span class="delimiter">&quot;</span><span class="content">1 heure</span><span class="delimiter">&quot;</span></span> ||
                diff &lt; <span class="integer">86400</span> &amp;&amp; Math.floor( diff / <span class="integer">3600</span> ) + <span class="string"><span class="delimiter">&quot;</span><span class="content"> heures</span><span class="delimiter">&quot;</span></span>) ||
            day_diff == <span class="integer">1</span> &amp;&amp; <span class="string"><span class="delimiter">&quot;</span><span class="content">Hier</span><span class="delimiter">&quot;</span></span> ||
            day_diff &lt; <span class="integer">7</span> &amp;&amp; day_diff + <span class="string"><span class="delimiter">&quot;</span><span class="content"> jours</span><span class="delimiter">&quot;</span></span> ||
            day_diff &lt; <span class="integer">31</span> &amp;&amp; Math.ceil( day_diff / <span class="integer">7</span> ) + <span class="string"><span class="delimiter">&quot;</span><span class="content"> semaines</span><span class="delimiter">&quot;</span></span>;
    }
    window.<span class="function">onload</span> = <span class="keyword">function</span>(){
        <span class="keyword">var</span> links = document.getElementsByTagName(<span class="string"><span class="delimiter">&quot;</span><span class="content">a</span><span class="delimiter">&quot;</span></span>);
        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="integer">0</span>; i &lt; links.length; i++) {
            <span class="keyword">if</span> (links[i].title) {
                <span class="keyword">var</span> date = prettyDate(<span class="string"><span class="delimiter">&quot;</span><span class="content">2008-01-28T22:25:00Z</span><span class="delimiter">&quot;</span></span>, links[i].title);
                <span class="keyword">if</span> (date) {
                    links[i].innerHTML = date;
                }
            }
        }
    };</span>
    <span class="tag">&lt;/script&gt;</span>
<span class="tag">&lt;/head&gt;</span>
<span class="tag">&lt;body&gt;</span>

<span class="tag">&lt;ul&gt;</span>
<span class="tag">&lt;li</span> <span class="attribute-name">class</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">entry</span><span class="delimiter">&quot;</span></span> <span class="attribute-name">id</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">post57</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span>
    <span class="tag">&lt;p&gt;</span>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Curabitur dignissim quis libero eu lobortis.<span class="tag">&lt;/p&gt;</span>
    <span class="tag">&lt;small</span> <span class="attribute-name">class</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">extra</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span>
        Posté il y a <span class="tag">&lt;a</span> <span class="attribute-name">href</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">http://ptitgraig.github.io/2008/01/blah/57/</span><span class="delimiter">&quot;</span></span> <span class="attribute-name">title</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">2008-01-28T21:24:17Z</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span>January 28th, 2008<span class="tag">&lt;/a&gt;</span>
        par <span class="tag">&lt;a</span> <span class="attribute-name">href</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">http://ptitgraig.github.io/john/</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span>John Resig<span class="tag">&lt;/a&gt;</span>
    <span class="tag">&lt;/small&gt;</span>
<span class="tag">&lt;/li&gt;</span>
<span class="comment">&lt;!-- more list items --&gt;</span>
<span class="tag">&lt;/ul&gt;</span>

<span class="tag">&lt;/body&gt;</span>
<span class="tag">&lt;/html&gt;</span>
</pre></div>
</div>
</div>

<p>Maintenant, les liens devraient avoir comme valeur : “à l’instant”, “il y a 2 heures”, “hier” etc… C’est un départ, mais ce n’est pas encore une unité testable. Donc, tout ce que nous pouvons faire, sans changer le code d’avantage, c’est tester les changements qui se sont produits dans DOM. Mais, même si cela fonctionne, le moindre changement dans le HTML pourrait faire échouer le test. Ce qui aurait quand même un très mauvais rapport coût/bénéfice pour un test comme celui-là.</p>

<h2 id="refactorisation-tape-0">Refactorisation, étape 0</h2>

<p>Au lieu de tester le HTML, refactorisons juste assez le code pour avoir quelque chose qui se test unitairement.</p>

<p>Pour cela, nous avons besoin d’effectuer deux changements : passer la date actuelle en paramètre à la fonction <code>prettyDate</code> en utilisant <code>new Date</code> au lieu de l’écrire en dur, puis déplacer la fonction dans un fichier à part afin que nous puissions inclure le code sur une page séparée et effectuer nos tests unitaires.</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="tag">&lt;html&gt;</span>
<span class="tag">&lt;head&gt;</span>
    <span class="tag">&lt;meta</span> <span class="attribute-name">http-equiv</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">Content-Type</span><span class="delimiter">&quot;</span></span> <span class="attribute-name">content</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">text/html; charset=UTF-8</span><span class="delimiter">&quot;</span></span> <span class="tag">/&gt;</span>
    <span class="tag">&lt;title&gt;</span>Refactored date examples<span class="tag">&lt;/title&gt;</span>
    <span class="tag">&lt;script</span> <span class="attribute-name">src</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">prettydate.js</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span><span class="tag">&lt;/script&gt;</span>
    <span class="tag">&lt;script&gt;</span>
<span class="inline">    window.<span class="function">onload</span> = <span class="keyword">function</span>() {
        <span class="keyword">var</span> links = document.getElementsByTagName(<span class="string"><span class="delimiter">&quot;</span><span class="content">a</span><span class="delimiter">&quot;</span></span>);
        <span class="keyword">for</span> ( <span class="keyword">var</span> i = <span class="integer">0</span>; i &lt; links.length; i++ ) {
            <span class="keyword">if</span> (links[i].title) {
                <span class="keyword">var</span> date = prettyDate(<span class="string"><span class="delimiter">&quot;</span><span class="content">2008-01-28T22:25:00Z</span><span class="delimiter">&quot;</span></span>, links[i].title);
                <span class="keyword">if</span> (date) {
                    links[i].innerHTML = date;
                }
            }
        }
    };</span>
    <span class="tag">&lt;/script&gt;</span>
<span class="tag">&lt;/head&gt;</span>
<span class="tag">&lt;body&gt;</span>

<span class="tag">&lt;ul&gt;</span>
<span class="tag">&lt;li</span> <span class="attribute-name">class</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">entry</span><span class="delimiter">&quot;</span></span> <span class="attribute-name">id</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">post57</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span>
    <span class="tag">&lt;p&gt;</span>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Curabitur dignissim quis libero eu lobortis.<span class="tag">&lt;/p&gt;</span>
    <span class="tag">&lt;small</span> <span class="attribute-name">class</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">extra</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span>
        Posted <span class="tag">&lt;a</span> <span class="attribute-name">href</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">http://ptitgraig.github.io/2008/01/blah/57/</span><span class="delimiter">&quot;</span></span> <span class="attribute-name">title</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">2008-01-28T20:24:17Z</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span>January 28th, 2008<span class="tag">&lt;/a&gt;</span>
        by <span class="tag">&lt;a</span> <span class="attribute-name">href</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">http://ptitgraig.github.io/john/</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span>John Resig<span class="tag">&lt;/a&gt;</span>
    <span class="tag">&lt;/small&gt;</span>
<span class="tag">&lt;/li&gt;</span>
<span class="comment">&lt;!-- more list items --&gt;</span>
<span class="tag">&lt;/ul&gt;</span>

<span class="tag">&lt;/body&gt;</span>
<span class="tag">&lt;/html&gt;</span>
</pre></div>
</div>
</div>

<p>Et voici le contenu de <code>prettydate.js</code> :</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="keyword">function</span> <span class="function">prettyDate</span>(now, time){
    <span class="keyword">var</span> date = <span class="keyword">new</span> Date(time || <span class="string"><span class="delimiter">&quot;</span><span class="delimiter">&quot;</span></span>),
        diff = (((<span class="keyword">new</span> Date(now)).getTime() - date.getTime()) / <span class="integer">1000</span>),
        day_diff = Math.floor(diff / <span class="integer">86400</span>);

    <span class="keyword">if</span> (isNaN(day_diff) || day_diff &lt; <span class="integer">0</span> || day_diff &gt;= <span class="integer">31</span>) {
        <span class="keyword">return</span>;
    }

    <span class="keyword">return</span> day_diff == <span class="integer">0</span> &amp;&amp; (
            diff &lt; <span class="integer">60</span> &amp;&amp; <span class="string"><span class="delimiter">&quot;</span><span class="content">à l'instant</span><span class="delimiter">&quot;</span></span> ||
            diff &lt; <span class="integer">120</span> &amp;&amp; <span class="string"><span class="delimiter">&quot;</span><span class="content">1 minute</span><span class="delimiter">&quot;</span></span> ||
            diff &lt; <span class="integer">3600</span> &amp;&amp; Math.floor( diff / <span class="integer">60</span> ) + <span class="string"><span class="delimiter">&quot;</span><span class="content"> minutes</span><span class="delimiter">&quot;</span></span> ||
            diff &lt; <span class="integer">7200</span> &amp;&amp; <span class="string"><span class="delimiter">&quot;</span><span class="content">1 heure</span><span class="delimiter">&quot;</span></span> ||
            diff &lt; <span class="integer">86400</span> &amp;&amp; Math.floor( diff / <span class="integer">3600</span> ) + <span class="string"><span class="delimiter">&quot;</span><span class="content"> heures</span><span class="delimiter">&quot;</span></span>) ||
        day_diff == <span class="integer">1</span> &amp;&amp; <span class="string"><span class="delimiter">&quot;</span><span class="content">Hier</span><span class="delimiter">&quot;</span></span> ||
        day_diff &lt; <span class="integer">7</span> &amp;&amp; day_diff + <span class="string"><span class="delimiter">&quot;</span><span class="content"> jours</span><span class="delimiter">&quot;</span></span> ||
        day_diff &lt; <span class="integer">31</span> &amp;&amp; Math.ceil( day_diff / <span class="integer">7</span> ) + <span class="string"><span class="delimiter">&quot;</span><span class="content"> semaines</span><span class="delimiter">&quot;</span></span>;
}
</pre></div>
</div>
</div>

<p>Maintenant que nous avons quelque chose à tester, écrivons de vrais tests unitaires :</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="tag">&lt;html&gt;</span>
<span class="tag">&lt;head&gt;</span>
    <span class="tag">&lt;meta</span> <span class="attribute-name">http-equiv</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">Content-Type</span><span class="delimiter">&quot;</span></span> <span class="attribute-name">content</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">text/html; charset=UTF-8</span><span class="delimiter">&quot;</span></span> <span class="tag">/&gt;</span>
    <span class="tag">&lt;title&gt;</span>Refactored date examples<span class="tag">&lt;/title&gt;</span>
    <span class="tag">&lt;script</span> <span class="attribute-name">src</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">prettydate.js</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span><span class="tag">&lt;/script&gt;</span>
    <span class="tag">&lt;script&gt;</span>
<span class="inline">    <span class="keyword">function</span> <span class="function">test</span>(then, expected) {
        results.total++;
        <span class="keyword">var</span> result = prettyDate(<span class="string"><span class="delimiter">&quot;</span><span class="content">2008-01-28T22:25:00</span><span class="delimiter">&quot;</span></span>, then);
        <span class="keyword">if</span> (result !== expected) {
            results.bad++;
            console.log(<span class="string"><span class="delimiter">&quot;</span><span class="content">Attendu </span><span class="delimiter">&quot;</span></span> + expected + <span class="string"><span class="delimiter">&quot;</span><span class="content">, mais obtenu </span><span class="delimiter">&quot;</span></span> + result);
        }
    }
    <span class="keyword">var</span> results = {
        <span class="key">total</span>: <span class="integer">0</span>,
        <span class="key">bad</span>: <span class="integer">0</span>
    };
    test(<span class="string"><span class="delimiter">&quot;</span><span class="content">2008-01-28T22:24:30</span><span class="delimiter">&quot;</span></span>, <span class="string"><span class="delimiter">&quot;</span><span class="content">à l'instant</span><span class="delimiter">&quot;</span></span>);
    test(<span class="string"><span class="delimiter">&quot;</span><span class="content">2008-01-28T22:23:30</span><span class="delimiter">&quot;</span></span>, <span class="string"><span class="delimiter">&quot;</span><span class="content">1 minute</span><span class="delimiter">&quot;</span></span>);
    test(<span class="string"><span class="delimiter">&quot;</span><span class="content">2008-01-28T21:23:30</span><span class="delimiter">&quot;</span></span>, <span class="string"><span class="delimiter">&quot;</span><span class="content">1 heure</span><span class="delimiter">&quot;</span></span>);
    test(<span class="string"><span class="delimiter">&quot;</span><span class="content">2008-01-27T22:23:30</span><span class="delimiter">&quot;</span></span>, <span class="string"><span class="delimiter">&quot;</span><span class="content">Hier</span><span class="delimiter">&quot;</span></span>);
    test(<span class="string"><span class="delimiter">&quot;</span><span class="content">2008-01-26T22:23:30</span><span class="delimiter">&quot;</span></span>, <span class="string"><span class="delimiter">&quot;</span><span class="content">2 jours</span><span class="delimiter">&quot;</span></span>);
    test(<span class="string"><span class="delimiter">&quot;</span><span class="content">2007-01-26T22:23:30</span><span class="delimiter">&quot;</span></span>, <span class="predefined-constant">undefined</span>);
    console.log(<span class="string"><span class="delimiter">&quot;</span><span class="content">De </span><span class="delimiter">&quot;</span></span> + results.total + <span class="string"><span class="delimiter">&quot;</span><span class="content"> tests, </span><span class="delimiter">&quot;</span></span> + results.bad + <span class="string"><span class="delimiter">&quot;</span><span class="content"> ont échoué, </span><span class="delimiter">&quot;</span></span>
        + (results.total - results.bad) + <span class="string"><span class="delimiter">&quot;</span><span class="content"> ont réussi.</span><span class="delimiter">&quot;</span></span>);</span>
    <span class="tag">&lt;/script&gt;</span>
<span class="tag">&lt;/head&gt;</span>
<span class="tag">&lt;body&gt;</span>
<span class="tag">&lt;/body&gt;</span>
<span class="tag">&lt;/html&gt;</span>
</pre></div>
</div>
</div>

<p>Nous avons un framework de test adapté, utilisant la console pour afficher les résultats. Il n’y a aucune dépendance au DOM, par conséquent, vous pouvez simplement l’exécuter dans un environnement JavaScript hors navigateur, tel que Node.js ou Rhino, en déplaçant le code de la balise script dans un fichier à part.</p>

<p>Si un test échoue, le résultat du test attendu ainsi que le résultat obtenu vont être affichés. Au final, un résumé du nombre de test en échec et réussis est aussi affiché.</p>

<p>Si tous les tests réussissent, comme ils le devraient, vous devriez voir la chose suivante dans la console :</p>

<div><div class="CodeRay">
  <div class="code"><pre>De 6 tests, 0 ont échoué, 6 ont réussi.
</pre></div>
</div>
</div>

<p>Pour voir ce qu’est une assertion <sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup> erronée, nous pouvons changer quelque chose afin que le test échoue :</p>

<div><div class="CodeRay">
  <div class="code"><pre>Attendu 2 jours, mais obtenu 2 jour.
De 6 tests, 1 ont échoué, 5 ont réussi.
</pre></div>
</div>
</div>

<p>Bien que cette approche adaptée est intéressant en POC <sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup> (on peut vraiment écrire un exécuteur de test en quelque lignes de code), il est bien plus pratique de d’utiliser un framework de test existant, qui fourni un meilleur affichage des résultats et plus d’infrastructure pour écrire et organiser les tests.</p>

<h2 id="qunit--un-outil-de-test-javascript">Qunit : un outil de test JavaScript</h2>

<p>Le choix d’un framework est principalement affaire de goût. Pour le reste de cet article, nous utiliseront QUnit (prononcé “q-unit”), car son style de description des tests est proche du framework de test que nous venons de créer.</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="tag">&lt;html&gt;</span>
<span class="tag">&lt;head&gt;</span>
    <span class="tag">&lt;meta</span> <span class="attribute-name">http-equiv</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">Content-Type</span><span class="delimiter">&quot;</span></span> <span class="attribute-name">content</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">text/html; charset=UTF-8</span><span class="delimiter">&quot;</span></span> <span class="tag">/&gt;</span>
    <span class="tag">&lt;title&gt;</span>Refactorisation date<span class="tag">&lt;/title&gt;</span>

    <span class="tag">&lt;link</span> <span class="attribute-name">rel</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">stylesheet</span><span class="delimiter">&quot;</span></span> <span class="attribute-name">href</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">http://ptitgraig.github.io//code.jquery.com/qunit/qunit-1.16.0.css</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span>
    <span class="tag">&lt;script</span> <span class="attribute-name">src</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">http://ptitgraig.github.io//code.jquery.com/qunit/qunit-1.16.0.js</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span><span class="tag">&lt;/script&gt;</span>
    <span class="tag">&lt;script</span> <span class="attribute-name">src</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">prettydate.js</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span><span class="tag">&lt;/script&gt;</span>

    <span class="tag">&lt;script&gt;</span>
<span class="inline">    test(<span class="string"><span class="delimiter">&quot;</span><span class="content">prettydate basics</span><span class="delimiter">&quot;</span></span>, <span class="keyword">function</span>() {
        <span class="keyword">var</span> now = <span class="string"><span class="delimiter">&quot;</span><span class="content">2008/01/28 22:25:00</span><span class="delimiter">&quot;</span></span>;
        equal(prettyDate(now, <span class="string"><span class="delimiter">&quot;</span><span class="content">2008/01/28 22:24:30</span><span class="delimiter">&quot;</span></span>), <span class="string"><span class="delimiter">&quot;</span><span class="content">à l'instant</span><span class="delimiter">&quot;</span></span>);
        equal(prettyDate(now, <span class="string"><span class="delimiter">&quot;</span><span class="content">2008/01/28 22:23:30</span><span class="delimiter">&quot;</span></span>), <span class="string"><span class="delimiter">&quot;</span><span class="content">1 minute</span><span class="delimiter">&quot;</span></span>);
        equal(prettyDate(now, <span class="string"><span class="delimiter">&quot;</span><span class="content">2008/01/28 21:23:30</span><span class="delimiter">&quot;</span></span>), <span class="string"><span class="delimiter">&quot;</span><span class="content">1 heure</span><span class="delimiter">&quot;</span></span>);
        equal(prettyDate(now, <span class="string"><span class="delimiter">&quot;</span><span class="content">2008/01/27 22:23:30</span><span class="delimiter">&quot;</span></span>), <span class="string"><span class="delimiter">&quot;</span><span class="content">Hier</span><span class="delimiter">&quot;</span></span>);
        equal(prettyDate(now, <span class="string"><span class="delimiter">&quot;</span><span class="content">2008/01/26 22:23:30</span><span class="delimiter">&quot;</span></span>), <span class="string"><span class="delimiter">&quot;</span><span class="content">2 jours</span><span class="delimiter">&quot;</span></span>);
        equal(prettyDate(now, <span class="string"><span class="delimiter">&quot;</span><span class="content">2007/01/26 22:23:30</span><span class="delimiter">&quot;</span></span>), <span class="predefined-constant">undefined</span>);
    });</span>
    <span class="tag">&lt;/script&gt;</span>
<span class="tag">&lt;/head&gt;</span>
<span class="tag">&lt;body&gt;</span>
    <span class="tag">&lt;div</span> <span class="attribute-name">id</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">qunit</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span><span class="tag">&lt;/div&gt;</span>
<span class="tag">&lt;/body&gt;</span>
<span class="tag">&lt;/html&gt;</span>
</pre></div>
</div>
</div>

<p>Trois sections méritent que nous y portions attention. En dehors de l’habituel HTML boilerplate, nous avons trois fichiers inclus : deux fichiers pour QUnit (<code>qunit-1.16.0.css</code> et <code>qunit-1.16.0.js</code>) et notre script précédent <code>prettydate.js</code></p>

<p>Ensuite, il y a un autre bloc de script avec les tests à exécuter. La fonction de test <code>test()</code>, appelée une seule fois, reçoit une chaîne de caractère comme premier paramètre (qui donne un nom à la suite de tests) et une fonction comme deuxième paramètre (qui va effectivement exécuter le code pour ce test). Le code initialise une variable <code>now</code>, qui est réutilisée plus bas, puis apelle plusieurs fois la fonction <code>equal</code> avec variété de paramètres. La fonction <code>equal</code> est une assertion que QUnit fourni parmi tant d’autres. Le premier paramètre est le résultat d’un appel à la fonction prettyDate, avec maintenant la variable <code>now</code> en premier paramètre et une date en second. Le second paramètre est le resultat qui est attendu. Si les deux paramètres ont la même valeur à la fin, le test va passer, sinon il échoue.</p>

<p>Enfin, on peut voir dans le <code>body</code> quelques éléments spécifiques à QUnit (<code>&lt;div id="qunit"&gt;&lt;/div&gt;</code>). Ces éléments sont optionnels et permettent seulement d’afficher le résultat des tests.</p>

<p>Voici le résultat :</p>

<p><iframe style="width: 100%; height: 300px" src="http://jsfiddle.net/sdnthswp/embedded/result/light/"></iframe></p>

<p>Avec un test en échec, nous avons :</p>

<p><iframe style="width: 100%; height: 300px" src="http://jsfiddle.net/dw0meLxh/embedded/result/light/"></iframe></p>

<p>Puisque le test contient une assertion en échec, QUnit ne cache pas les résultats du test, et nous pouvons voir immédiatement ce qui s’est mal passé. Nous obtenons à la fois un affichage des résultats attendus et ceux obtenus, et un diff entre les deux. Ce qui est utile pour comparer des chaînes de caractères plus longue. Dans le cas présent, ce qui s’est mal passé est évident.</p>

<h2 id="refactorisation-tape-1">Refactorisation, étape 1</h2>

<p>Les assertions sont quelque peu incomplètes car nous ne testons pas la variante “n semaines”. Avant de l’ajouter, nous devons considérer une refonte du code. Aujourd’hui, on fait appel à <code>prettyDate</code> pour chaque assertion et on lui passe le paramètre <code>now</code>. Nous pourions facilement refactoriser cela en une fonction d’assertion personnalisée :</p>

<div><div class="CodeRay">
  <div class="code"><pre>test(<span class="string"><span class="delimiter">&quot;</span><span class="content">prettydate basics</span><span class="delimiter">&quot;</span></span>, <span class="keyword">function</span>() {
    <span class="keyword">function</span> <span class="function">date</span>(then, expected) {
        equal(prettyDate(<span class="string"><span class="delimiter">&quot;</span><span class="content">2008/01/28 22:25:00</span><span class="delimiter">&quot;</span></span>, then), expected);
    }
    date(<span class="string"><span class="delimiter">&quot;</span><span class="content">2008/01/28 22:24:30</span><span class="delimiter">&quot;</span></span>, <span class="string"><span class="delimiter">&quot;</span><span class="content">à l'instant</span><span class="delimiter">&quot;</span></span>);
    date(<span class="string"><span class="delimiter">&quot;</span><span class="content">2008/01/28 22:23:30</span><span class="delimiter">&quot;</span></span>, <span class="string"><span class="delimiter">&quot;</span><span class="content">1 minute</span><span class="delimiter">&quot;</span></span>);
    date(<span class="string"><span class="delimiter">&quot;</span><span class="content">2008/01/28 21:23:30</span><span class="delimiter">&quot;</span></span>, <span class="string"><span class="delimiter">&quot;</span><span class="content">1 heure</span><span class="delimiter">&quot;</span></span>);
    date(<span class="string"><span class="delimiter">&quot;</span><span class="content">2008/01/27 22:23:30</span><span class="delimiter">&quot;</span></span>, <span class="string"><span class="delimiter">&quot;</span><span class="content">Hier</span><span class="delimiter">&quot;</span></span>);
    date(<span class="string"><span class="delimiter">&quot;</span><span class="content">2008/01/26 22:23:30</span><span class="delimiter">&quot;</span></span>, <span class="string"><span class="delimiter">&quot;</span><span class="content">2 jours</span><span class="delimiter">&quot;</span></span>);
    date(<span class="string"><span class="delimiter">&quot;</span><span class="content">2007/01/26 22:23:30</span><span class="delimiter">&quot;</span></span>, <span class="predefined-constant">undefined</span>);
});
</pre></div>
</div>
</div>

<p>Ici nous avons déplacé l’appel à <code>prettyDate</code> dans une fonction <code>date</code>, en insérant la variable <code>now</code> directement dans la fonction. Nous obtenons alors des données pertinentes pour chaque assertion, plus faciles à lire, tout en gardant un niveau d’abstraction assez évident.</p>

<h2 id="tester-la-manipulation-du-dom">Tester la manipulation du DOM</h2>

<p>Maintenant que la fonction <code>prettyDate</code> est suffisamment bien testée, retournons à notre exemple de départ. En plus de la fonction <code>prettyDate</code>, le code sélectionne quelques éléments du DOM et les mets à jour, tout cela au sein d’un événement <code>window.load</code>. En appliquant les mêmes principes qu’avant, nous devrions être capable de refactoriser ce code et de le tester. Ajouter à cela, nous présenterons un module pour ces deux fonctions qui permettra d’éviter la pollution de la scope globale et qui permettra aussi de donner un nom qui a plus de sens à ces deux fonctions.</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="tag">&lt;html&gt;</span>
<span class="tag">&lt;head&gt;</span>
    <span class="tag">&lt;meta</span> <span class="attribute-name">http-equiv</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">Content-Type</span><span class="delimiter">&quot;</span></span> <span class="attribute-name">content</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">text/html; charset=UTF-8</span><span class="delimiter">&quot;</span></span> <span class="tag">/&gt;</span>
    <span class="tag">&lt;title&gt;</span>Refactored date examples<span class="tag">&lt;/title&gt;</span>
    <span class="tag">&lt;link</span> <span class="attribute-name">rel</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">stylesheet</span><span class="delimiter">&quot;</span></span> <span class="attribute-name">href</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">http://ptitgraig.github.io//code.jquery.com/qunit/qunit-1.16.0.css</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span>
    <span class="tag">&lt;script</span> <span class="attribute-name">src</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">http://ptitgraig.github.io//code.jquery.com/qunit/qunit-1.16.0.js</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span><span class="tag">&lt;/script&gt;</span>
    <span class="tag">&lt;script</span> <span class="attribute-name">src</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">prettydate2.js</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span><span class="tag">&lt;/script&gt;</span>
    <span class="tag">&lt;script&gt;</span>
<span class="inline">    test(<span class="string"><span class="delimiter">&quot;</span><span class="content">prettydate.format</span><span class="delimiter">&quot;</span></span>, <span class="keyword">function</span>() {
        <span class="keyword">function</span> <span class="function">date</span>(then, expected) {
            equal(prettyDate.format(<span class="string"><span class="delimiter">&quot;</span><span class="content">2008/01/28 22:25:00</span><span class="delimiter">&quot;</span></span>, then), expected);
        }
        date(<span class="string"><span class="delimiter">&quot;</span><span class="content">2008/01/28 22:24:30</span><span class="delimiter">&quot;</span></span>, <span class="string"><span class="delimiter">&quot;</span><span class="content">à l'instant</span><span class="delimiter">&quot;</span></span>);
        date(<span class="string"><span class="delimiter">&quot;</span><span class="content">2008/01/28 22:23:30</span><span class="delimiter">&quot;</span></span>, <span class="string"><span class="delimiter">&quot;</span><span class="content">1 minute</span><span class="delimiter">&quot;</span></span>);
        date(<span class="string"><span class="delimiter">&quot;</span><span class="content">2008/01/28 21:23:30</span><span class="delimiter">&quot;</span></span>, <span class="string"><span class="delimiter">&quot;</span><span class="content">1 heure</span><span class="delimiter">&quot;</span></span>);
        date(<span class="string"><span class="delimiter">&quot;</span><span class="content">2008/01/27 22:23:30</span><span class="delimiter">&quot;</span></span>, <span class="string"><span class="delimiter">&quot;</span><span class="content">Hier</span><span class="delimiter">&quot;</span></span>);
        date(<span class="string"><span class="delimiter">&quot;</span><span class="content">2008/01/26 22:23:30</span><span class="delimiter">&quot;</span></span>, <span class="string"><span class="delimiter">&quot;</span><span class="content">2 jours</span><span class="delimiter">&quot;</span></span>);
        date(<span class="string"><span class="delimiter">&quot;</span><span class="content">2007/01/26 22:23:30</span><span class="delimiter">&quot;</span></span>, <span class="predefined-constant">undefined</span>);
    });

    test(<span class="string"><span class="delimiter">&quot;</span><span class="content">prettyDate.update</span><span class="delimiter">&quot;</span></span>, <span class="keyword">function</span>() {
        <span class="keyword">var</span> links = document.getElementById(<span class="string"><span class="delimiter">&quot;</span><span class="content">qunit-fixture</span><span class="delimiter">&quot;</span></span>).getElementsByTagName(<span class="string"><span class="delimiter">&quot;</span><span class="content">a</span><span class="delimiter">&quot;</span></span>);
        equal(links[<span class="integer">0</span>].innerHTML, <span class="string"><span class="delimiter">&quot;</span><span class="content">January 28th, 2008</span><span class="delimiter">&quot;</span></span>);
        equal(links[<span class="integer">2</span>].innerHTML, <span class="string"><span class="delimiter">&quot;</span><span class="content">January 27th, 2008</span><span class="delimiter">&quot;</span></span>);
        prettyDate.update(<span class="string"><span class="delimiter">&quot;</span><span class="content">2008-01-28T22:25:00Z</span><span class="delimiter">&quot;</span></span>);
        equal(links[<span class="integer">0</span>].innerHTML, <span class="string"><span class="delimiter">&quot;</span><span class="content">2 heures</span><span class="delimiter">&quot;</span></span>);
        equal(links[<span class="integer">2</span>].innerHTML, <span class="string"><span class="delimiter">&quot;</span><span class="content">Hier</span><span class="delimiter">&quot;</span></span>);
    });

    test(<span class="string"><span class="delimiter">&quot;</span><span class="content">prettyDate.update, un jour plus tard</span><span class="delimiter">&quot;</span></span>, <span class="keyword">function</span>() {
        <span class="keyword">var</span> links = document.getElementById(<span class="string"><span class="delimiter">&quot;</span><span class="content">qunit-fixture</span><span class="delimiter">&quot;</span></span>).getElementsByTagName(<span class="string"><span class="delimiter">&quot;</span><span class="content">a</span><span class="delimiter">&quot;</span></span>);
        equal(links[<span class="integer">0</span>].innerHTML, <span class="string"><span class="delimiter">&quot;</span><span class="content">January 28th, 2008</span><span class="delimiter">&quot;</span></span>);
        equal(links[<span class="integer">2</span>].innerHTML, <span class="string"><span class="delimiter">&quot;</span><span class="content">January 27th, 2008</span><span class="delimiter">&quot;</span></span>);
        prettyDate.update(<span class="string"><span class="delimiter">&quot;</span><span class="content">2008-01-29T22:25:00Z</span><span class="delimiter">&quot;</span></span>);
        equal(links[<span class="integer">0</span>].innerHTML, <span class="string"><span class="delimiter">&quot;</span><span class="content">Hier</span><span class="delimiter">&quot;</span></span>);
        equal(links[<span class="integer">2</span>].innerHTML, <span class="string"><span class="delimiter">&quot;</span><span class="content">2 jours</span><span class="delimiter">&quot;</span></span>);
    });</span>
    <span class="tag">&lt;/script&gt;</span>
<span class="tag">&lt;/head&gt;</span>
<span class="tag">&lt;body&gt;</span>
    <span class="tag">&lt;div</span> <span class="attribute-name">id</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">qunit</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span><span class="tag">&lt;/div&gt;</span>
    <span class="tag">&lt;div</span> <span class="attribute-name">id</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">qunit-fixture</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span>
        <span class="tag">&lt;ul&gt;</span>
            <span class="tag">&lt;li</span> <span class="attribute-name">class</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">entry</span><span class="delimiter">&quot;</span></span> <span class="attribute-name">id</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">post57</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span>
                <span class="tag">&lt;p&gt;</span>Lorem ipsum<span class="tag">&lt;/p&gt;</span>
                <span class="tag">&lt;small</span> <span class="attribute-name">class</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">extra</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span>
                    Posté il y a <span class="tag">&lt;span</span> <span class="attribute-name">class</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">time</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span><span class="tag">&lt;a</span> <span class="attribute-name">href</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">http://ptitgraig.github.io/2008/01/blah/57/</span><span class="delimiter">&quot;</span></span> <span class="attribute-name">title</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">2008-01-28T20:24:17Z</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span>January 28th, 2008<span class="tag">&lt;/a&gt;</span><span class="tag">&lt;/span&gt;</span>
                    par <span class="tag">&lt;span</span> <span class="attribute-name">class</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">author</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span><span class="tag">&lt;a</span> <span class="attribute-name">href</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">http://ptitgraig.github.io/john/</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span>John Resig<span class="tag">&lt;/a&gt;</span><span class="tag">&lt;/span&gt;</span>
                <span class="tag">&lt;/small&gt;</span>
            <span class="tag">&lt;/li&gt;</span>
            <span class="tag">&lt;li</span> <span class="attribute-name">class</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">entry</span><span class="delimiter">&quot;</span></span> <span class="attribute-name">id</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">post57</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span>
                <span class="tag">&lt;p&gt;</span>Lorem ipsum<span class="tag">&lt;/p&gt;</span>
                <span class="tag">&lt;small</span> <span class="attribute-name">class</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">extra</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span>
                    Posté il y a <span class="tag">&lt;span</span> <span class="attribute-name">class</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">time</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span><span class="tag">&lt;a</span> <span class="attribute-name">href</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">http://ptitgraig.github.io/2008/01/blah/57/</span><span class="delimiter">&quot;</span></span> <span class="attribute-name">title</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">2008-01-27T22:24:17Z</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span>January 27th, 2008<span class="tag">&lt;/a&gt;</span><span class="tag">&lt;/span&gt;</span>
                    par <span class="tag">&lt;span</span> <span class="attribute-name">class</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">author</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span><span class="tag">&lt;a</span> <span class="attribute-name">href</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">http://ptitgraig.github.io/john/</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span>John Resig<span class="tag">&lt;/a&gt;</span><span class="tag">&lt;/span&gt;</span>
                <span class="tag">&lt;/small&gt;</span>
            <span class="tag">&lt;/li&gt;</span>
        <span class="tag">&lt;/ul&gt;</span>
    <span class="tag">&lt;/div&gt;</span>
<span class="tag">&lt;/body&gt;</span>
<span class="tag">&lt;/html&gt;</span>
</pre></div>
</div>
</div>

<p>Voici le contenu de <code>prettydate2.js</code> :</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="keyword">var</span> prettyDate = {
    <span class="function">format</span>: <span class="keyword">function</span>(now, time){
        <span class="keyword">var</span> date = <span class="keyword">new</span> Date(time || <span class="string"><span class="delimiter">&quot;</span><span class="delimiter">&quot;</span></span>),
            diff = (((<span class="keyword">new</span> Date(now)).getTime() - date.getTime()) / <span class="integer">1000</span>),
            day_diff = Math.floor(diff / <span class="integer">86400</span>);

        <span class="keyword">if</span> (isNaN(day_diff) || day_diff &lt; <span class="integer">0</span> || day_diff &gt;= <span class="integer">31</span>) {
            <span class="keyword">return</span>;
        }

        <span class="keyword">return</span> day_diff === <span class="integer">0</span> &amp;&amp; (
                diff &lt; <span class="integer">60</span> &amp;&amp; <span class="string"><span class="delimiter">&quot;</span><span class="content">à l'instant</span><span class="delimiter">&quot;</span></span> ||
                diff &lt; <span class="integer">120</span> &amp;&amp; <span class="string"><span class="delimiter">&quot;</span><span class="content">1 minute</span><span class="delimiter">&quot;</span></span> ||
                diff &lt; <span class="integer">3600</span> &amp;&amp; Math.floor( diff / <span class="integer">60</span> ) + <span class="string"><span class="delimiter">&quot;</span><span class="content"> minutes</span><span class="delimiter">&quot;</span></span> ||
                diff &lt; <span class="integer">7200</span> &amp;&amp; <span class="string"><span class="delimiter">&quot;</span><span class="content">1 heure</span><span class="delimiter">&quot;</span></span> ||
                diff &lt; <span class="integer">86400</span> &amp;&amp; Math.floor( diff / <span class="integer">3600</span> ) + <span class="string"><span class="delimiter">&quot;</span><span class="content"> heures</span><span class="delimiter">&quot;</span></span>) ||
            day_diff === <span class="integer">1</span> &amp;&amp; <span class="string"><span class="delimiter">&quot;</span><span class="content">Hier</span><span class="delimiter">&quot;</span></span> ||
            day_diff &lt; <span class="integer">7</span> &amp;&amp; day_diff + <span class="string"><span class="delimiter">&quot;</span><span class="content"> jours</span><span class="delimiter">&quot;</span></span> ||
            day_diff &lt; <span class="integer">31</span> &amp;&amp; Math.ceil( day_diff / <span class="integer">7</span> ) + <span class="string"><span class="delimiter">&quot;</span><span class="content"> semaines</span><span class="delimiter">&quot;</span></span>;
    },

    <span class="function">update</span>: <span class="keyword">function</span>(now) {
        <span class="keyword">var</span> links = document.getElementsByTagName(<span class="string"><span class="delimiter">&quot;</span><span class="content">a</span><span class="delimiter">&quot;</span></span>);
        <span class="keyword">for</span> ( <span class="keyword">var</span> i = <span class="integer">0</span>; i &lt; links.length; i++ ) {
            <span class="keyword">if</span> (links[i].title) {
                <span class="keyword">var</span> date = prettyDate.format(now, links[i].title);
                <span class="keyword">if</span> (date) {
                    links[i].innerHTML = date;
                }
            }
        }
    }
};
</pre></div>
</div>
</div>

<p>La nouvelle fonction <code>prettyDate.update</code> est un extrait de l’exemple initial mais avec le paramètre <code>now</code> que nous passons à la fonction <code>prettyDate.format</code>. Le test de base de QUnit pour cette fonction commence par selectionner tous les éléments au sein de l’élément <code>#qunit-fixture</code>. <code>&lt;div id="qunit-fixture"&gt;&lt;/div&gt;</code> est un nouvel élément dans le <code>body</code>. Il contient un extrait du markup de notre exemple initial, suffisamment conséquent pour être éprouver par des tests. En le placant dans l’élément <code>#qunit-fixture</code>, nous n’avons pas à nous inquiéter d’éventuels changements de DOM suite à l’execution d’un test précédent, car QUNit va automatiquement ré-initialiser le markup après chaque test.</p>

<p>Regardons au premier test effectué pour <code>prettyDate.update</code>. Après avoir sélectionné les liens, deux assertions vérifient que ceux-ci ont bien leurs valeurs initiales. Après quoi, <code>prettyDate.update</code> est appelée, en lui passant une date donnée (identique à celle des tests précédents). Ensuite, deux assertions sont exécutées, vérifiant que le innerHTML de ces éléments ont la date au bon format “2 heures” et “Hier”.</p>

<h2 id="refactorisation-tape-2">Refactorisation, étape 2</h2>

<p>Le test suivant, <code>prettyDate.update, un jour plus tard</code> fait à peu près la même chose, hormis qu’il passe une date différente à <code>prettyDate.update</code> et ainsi attend un résultat différent pour les deux liens. Voyons si nous pouvons refactoriser ces tests pour supprimer le code dupliqué.</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="tag">&lt;html&gt;</span>
<span class="tag">&lt;head&gt;</span>
    <span class="tag">&lt;meta</span> <span class="attribute-name">http-equiv</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">Content-Type</span><span class="delimiter">&quot;</span></span> <span class="attribute-name">content</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">text/html; charset=UTF-8</span><span class="delimiter">&quot;</span></span> <span class="tag">/&gt;</span>
    <span class="tag">&lt;title&gt;</span>Refactored date examples<span class="tag">&lt;/title&gt;</span>
    <span class="tag">&lt;link</span> <span class="attribute-name">rel</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">stylesheet</span><span class="delimiter">&quot;</span></span> <span class="attribute-name">href</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">http://ptitgraig.github.io//code.jquery.com/qunit/qunit-1.16.0.css</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span>
    <span class="tag">&lt;script</span> <span class="attribute-name">src</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">http://ptitgraig.github.io//code.jquery.com/qunit/qunit-1.16.0.js</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span><span class="tag">&lt;/script&gt;</span>
    <span class="tag">&lt;script</span> <span class="attribute-name">src</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">prettydate2.js</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span><span class="tag">&lt;/script&gt;</span>
    <span class="tag">&lt;script&gt;</span>
<span class="inline">    test(<span class="string"><span class="delimiter">&quot;</span><span class="content">prettydate.format</span><span class="delimiter">&quot;</span></span>, <span class="keyword">function</span>() {
        <span class="keyword">function</span> <span class="function">date</span>(then, expected) {
            equal(prettyDate.format(<span class="string"><span class="delimiter">&quot;</span><span class="content">2008/01/28 22:25:00</span><span class="delimiter">&quot;</span></span>, then), expected);
        }
        date(<span class="string"><span class="delimiter">&quot;</span><span class="content">2008/01/28 22:24:30</span><span class="delimiter">&quot;</span></span>, <span class="string"><span class="delimiter">&quot;</span><span class="content">à l'instant</span><span class="delimiter">&quot;</span></span>);
        date(<span class="string"><span class="delimiter">&quot;</span><span class="content">2008/01/28 22:23:30</span><span class="delimiter">&quot;</span></span>, <span class="string"><span class="delimiter">&quot;</span><span class="content">1 minute</span><span class="delimiter">&quot;</span></span>);
        date(<span class="string"><span class="delimiter">&quot;</span><span class="content">2008/01/28 21:23:30</span><span class="delimiter">&quot;</span></span>, <span class="string"><span class="delimiter">&quot;</span><span class="content">1 heure</span><span class="delimiter">&quot;</span></span>);
        date(<span class="string"><span class="delimiter">&quot;</span><span class="content">2008/01/27 22:23:30</span><span class="delimiter">&quot;</span></span>, <span class="string"><span class="delimiter">&quot;</span><span class="content">Hier</span><span class="delimiter">&quot;</span></span>);
        date(<span class="string"><span class="delimiter">&quot;</span><span class="content">2008/01/26 22:23:30</span><span class="delimiter">&quot;</span></span>, <span class="string"><span class="delimiter">&quot;</span><span class="content">2 jours</span><span class="delimiter">&quot;</span></span>);
        date(<span class="string"><span class="delimiter">&quot;</span><span class="content">2007/01/26 22:23:30</span><span class="delimiter">&quot;</span></span>, <span class="predefined-constant">undefined</span>);
    });

    <span class="keyword">function</span> <span class="function">domtest</span>(name, now, first, second) {
        test(name, <span class="keyword">function</span>() {
            <span class="keyword">var</span> links = document.getElementById(<span class="string"><span class="delimiter">&quot;</span><span class="content">qunit-fixture</span><span class="delimiter">&quot;</span></span>).getElementsByTagName(<span class="string"><span class="delimiter">&quot;</span><span class="content">a</span><span class="delimiter">&quot;</span></span>);
            equal(links[<span class="integer">0</span>].innerHTML, <span class="string"><span class="delimiter">&quot;</span><span class="content">January 28th, 2008</span><span class="delimiter">&quot;</span></span>);
            equal(links[<span class="integer">2</span>].innerHTML, <span class="string"><span class="delimiter">&quot;</span><span class="content">January 27th, 2008</span><span class="delimiter">&quot;</span></span>);
            prettyDate.update(now);
            equal(links[<span class="integer">0</span>].innerHTML, first);
            equal(links[<span class="integer">2</span>].innerHTML, second);
        });
    }
    domtest(<span class="string"><span class="delimiter">&quot;</span><span class="content">prettyDate.update</span><span class="delimiter">&quot;</span></span>, <span class="string"><span class="delimiter">&quot;</span><span class="content">2008/01/28 22:25:00</span><span class="delimiter">&quot;</span></span>, <span class="string"><span class="delimiter">&quot;</span><span class="content">2 heures</span><span class="delimiter">&quot;</span></span>, <span class="string"><span class="delimiter">&quot;</span><span class="content">Hier</span><span class="delimiter">&quot;</span></span>);
    domtest(<span class="string"><span class="delimiter">&quot;</span><span class="content">prettyDate.update, one day later</span><span class="delimiter">&quot;</span></span>, <span class="string"><span class="delimiter">&quot;</span><span class="content">2008/01/29 22:25:00</span><span class="delimiter">&quot;</span></span>, <span class="string"><span class="delimiter">&quot;</span><span class="content">Hier</span><span class="delimiter">&quot;</span></span>, <span class="string"><span class="delimiter">&quot;</span><span class="content">2 jours</span><span class="delimiter">&quot;</span></span>);</span>
    <span class="tag">&lt;/script&gt;</span>
<span class="tag">&lt;/head&gt;</span>
<span class="tag">&lt;body&gt;</span>
    <span class="tag">&lt;div</span> <span class="attribute-name">id</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">qunit</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span><span class="tag">&lt;/div&gt;</span>
    <span class="tag">&lt;div</span> <span class="attribute-name">id</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">qunit-fixture</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span>
        <span class="tag">&lt;ul&gt;</span>
            <span class="tag">&lt;li</span> <span class="attribute-name">class</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">entry</span><span class="delimiter">&quot;</span></span> <span class="attribute-name">id</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">post57</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span>
                <span class="tag">&lt;p&gt;</span>blah blah blah…<span class="tag">&lt;/p&gt;</span>
                <span class="tag">&lt;small</span> <span class="attribute-name">class</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">extra</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span>
                    Posted <span class="tag">&lt;span</span> <span class="attribute-name">class</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">time</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span><span class="tag">&lt;a</span> <span class="attribute-name">href</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">http://ptitgraig.github.io/2008/01/blah/57/</span><span class="delimiter">&quot;</span></span> <span class="attribute-name">title</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">2008/01/28 20:24:17</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span>January 28th, 2008<span class="tag">&lt;/a&gt;</span><span class="tag">&lt;/span&gt;</span>
                    by <span class="tag">&lt;span</span> <span class="attribute-name">class</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">author</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span><span class="tag">&lt;a</span> <span class="attribute-name">href</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">http://ptitgraig.github.io/john/</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span>John Resig<span class="tag">&lt;/a&gt;</span><span class="tag">&lt;/span&gt;</span>
                <span class="tag">&lt;/small&gt;</span>
            <span class="tag">&lt;/li&gt;</span>
            <span class="tag">&lt;li</span> <span class="attribute-name">class</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">entry</span><span class="delimiter">&quot;</span></span> <span class="attribute-name">id</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">post57</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span>
                <span class="tag">&lt;p&gt;</span>blah blah blah…<span class="tag">&lt;/p&gt;</span>
                <span class="tag">&lt;small</span> <span class="attribute-name">class</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">extra</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span>
                    Posted <span class="tag">&lt;span</span> <span class="attribute-name">class</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">time</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span><span class="tag">&lt;a</span> <span class="attribute-name">href</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">http://ptitgraig.github.io/2008/01/blah/57/</span><span class="delimiter">&quot;</span></span> <span class="attribute-name">title</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">2008/01/27 22:24:17</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span>January 27th, 2008<span class="tag">&lt;/a&gt;</span><span class="tag">&lt;/span&gt;</span>
                    by <span class="tag">&lt;span</span> <span class="attribute-name">class</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">author</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span><span class="tag">&lt;a</span> <span class="attribute-name">href</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">http://ptitgraig.github.io/john/</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span>John Resig<span class="tag">&lt;/a&gt;</span><span class="tag">&lt;/span&gt;</span>
                <span class="tag">&lt;/small&gt;</span>
            <span class="tag">&lt;/li&gt;</span>
        <span class="tag">&lt;/ul&gt;</span>
    <span class="tag">&lt;/div&gt;</span>
<span class="tag">&lt;/body&gt;</span>
<span class="tag">&lt;/html&gt;</span>
</pre></div>
</div>
</div>

<p>Nous avons une nouvelle fonction <code>domtest</code>, qui encapsule la logique des deux tests précédents, avec comme paramètre le nom du test, la date et les deux chaînes de caractères attendues. Elle est donc appelée deux fois.</p>

<h2 id="retour-au-dpart">Retour au départ</h2>

<p>Ces choses en place, retournons à notre exemple de départ et regardons à quoi ça ressemble suite à la refactorisation.</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="tag">&lt;html&gt;</span>
<span class="tag">&lt;head&gt;</span>
    <span class="tag">&lt;meta</span> <span class="attribute-name">http-equiv</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">Content-Type</span><span class="delimiter">&quot;</span></span> <span class="attribute-name">content</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">text/html; charset=UTF-8</span><span class="delimiter">&quot;</span></span> <span class="tag">/&gt;</span>
    <span class="tag">&lt;title&gt;</span>Final date examples<span class="tag">&lt;/title&gt;</span>
    <span class="tag">&lt;script</span> <span class="attribute-name">src</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">prettydate2.js</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span><span class="tag">&lt;/script&gt;</span>
    <span class="tag">&lt;script&gt;</span>
<span class="inline">    window.<span class="function">onload</span> = <span class="keyword">function</span>() {
        prettyDate.update(<span class="string"><span class="delimiter">&quot;</span><span class="content">2008-01-28T22:25:00Z</span><span class="delimiter">&quot;</span></span>);
    };</span>
    <span class="tag">&lt;/script&gt;</span>
<span class="tag">&lt;/head&gt;</span>
<span class="tag">&lt;body&gt;</span>

<span class="tag">&lt;ul&gt;</span>
<span class="tag">&lt;li</span> <span class="attribute-name">class</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">entry</span><span class="delimiter">&quot;</span></span> <span class="attribute-name">id</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">post57</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span>
    <span class="tag">&lt;p&gt;</span>Lorem ipsum<span class="tag">&lt;/p&gt;</span>
    <span class="tag">&lt;small</span> <span class="attribute-name">class</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">extra</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span>
        Posté il y a <span class="tag">&lt;span</span> <span class="attribute-name">class</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">time</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span><span class="tag">&lt;a</span> <span class="attribute-name">href</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">http://ptitgraig.github.io/2008/01/blah/57/</span><span class="delimiter">&quot;</span></span> <span class="attribute-name">title</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">2008-01-28T20:24:17Z</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span><span class="tag">&lt;span&gt;</span>January 28th, 2008<span class="tag">&lt;/span&gt;</span><span class="tag">&lt;/a&gt;</span><span class="tag">&lt;/span&gt;</span>
        par <span class="tag">&lt;span</span> <span class="attribute-name">class</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">author</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span><span class="tag">&lt;a</span> <span class="attribute-name">href</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">http://ptitgraig.github.io/john/</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span>John Resig<span class="tag">&lt;/a&gt;</span><span class="tag">&lt;/span&gt;</span>
    <span class="tag">&lt;/small&gt;</span>
<span class="tag">&lt;/li&gt;</span>
<span class="tag">&lt;li</span> <span class="attribute-name">class</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">entry</span><span class="delimiter">&quot;</span></span> <span class="attribute-name">id</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">post57</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span>
    <span class="tag">&lt;p&gt;</span>Lorem ipsum<span class="tag">&lt;/p&gt;</span>
    <span class="tag">&lt;small</span> <span class="attribute-name">class</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">extra</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span>
        Posté il y a <span class="tag">&lt;span</span> <span class="attribute-name">class</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">time</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span><span class="tag">&lt;a</span> <span class="attribute-name">href</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">http://ptitgraig.github.io/2008/01/blah/57/</span><span class="delimiter">&quot;</span></span> <span class="attribute-name">title</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">2008-01-27T22:24:17Z</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span><span class="tag">&lt;span&gt;</span>January 27th, 2008<span class="tag">&lt;/span&gt;</span><span class="tag">&lt;/a&gt;</span><span class="tag">&lt;/span&gt;</span>
        par <span class="tag">&lt;span</span> <span class="attribute-name">class</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">author</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span><span class="tag">&lt;a</span> <span class="attribute-name">href</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">http://ptitgraig.github.io/john/</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span>John Resig<span class="tag">&lt;/a&gt;</span><span class="tag">&lt;/span&gt;</span>
    <span class="tag">&lt;/small&gt;</span>
<span class="tag">&lt;/li&gt;</span>
<span class="tag">&lt;li</span> <span class="attribute-name">class</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">entry</span><span class="delimiter">&quot;</span></span> <span class="attribute-name">id</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">post57</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span>
    <span class="tag">&lt;p&gt;</span>Lorem ipsum<span class="tag">&lt;/p&gt;</span>
    <span class="tag">&lt;small</span> <span class="attribute-name">class</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">extra</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span>
        Posté il y a <span class="tag">&lt;span</span> <span class="attribute-name">class</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">time</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span><span class="tag">&lt;a</span> <span class="attribute-name">href</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">http://ptitgraig.github.io/2008/01/blah/57/</span><span class="delimiter">&quot;</span></span> <span class="attribute-name">title</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">2008-01-26T22:24:17Z</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span><span class="tag">&lt;span&gt;</span>January 26th, 2008<span class="tag">&lt;/span&gt;</span><span class="tag">&lt;/a&gt;</span><span class="tag">&lt;/span&gt;</span>
        par <span class="tag">&lt;span</span> <span class="attribute-name">class</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">author</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span><span class="tag">&lt;a</span> <span class="attribute-name">href</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">http://ptitgraig.github.io/john/</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span>John Resig<span class="tag">&lt;/a&gt;</span><span class="tag">&lt;/span&gt;</span>
    <span class="tag">&lt;/small&gt;</span>
<span class="tag">&lt;/li&gt;</span>
<span class="tag">&lt;li</span> <span class="attribute-name">class</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">entry</span><span class="delimiter">&quot;</span></span> <span class="attribute-name">id</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">post57</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span>
    <span class="tag">&lt;p&gt;</span>Lorem ipsum<span class="tag">&lt;/p&gt;</span>
    <span class="tag">&lt;small</span> <span class="attribute-name">class</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">extra</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span>
        Posté il y a <span class="tag">&lt;span</span> <span class="attribute-name">class</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">time</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span><span class="tag">&lt;a</span> <span class="attribute-name">href</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">http://ptitgraig.github.io/2008/01/blah/57/</span><span class="delimiter">&quot;</span></span> <span class="attribute-name">title</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">2008-01-25T22:24:17Z</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span><span class="tag">&lt;span&gt;</span>January 25th, 2008<span class="tag">&lt;/span&gt;</span><span class="tag">&lt;/a&gt;</span><span class="tag">&lt;/span&gt;</span>
        par <span class="tag">&lt;span</span> <span class="attribute-name">class</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">author</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span><span class="tag">&lt;a</span> <span class="attribute-name">href</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">http://ptitgraig.github.io/john/</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span>John Resig<span class="tag">&lt;/a&gt;</span><span class="tag">&lt;/span&gt;</span>
    <span class="tag">&lt;/small&gt;</span>
<span class="tag">&lt;/li&gt;</span>
<span class="tag">&lt;li</span> <span class="attribute-name">class</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">entry</span><span class="delimiter">&quot;</span></span> <span class="attribute-name">id</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">post57</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span>
    <span class="tag">&lt;p&gt;</span>Lorem ipsum<span class="tag">&lt;/p&gt;</span>
    <span class="tag">&lt;small</span> <span class="attribute-name">class</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">extra</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span>
        Posté il y a <span class="tag">&lt;span</span> <span class="attribute-name">class</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">time</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span><span class="tag">&lt;a</span> <span class="attribute-name">href</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">http://ptitgraig.github.io/2008/01/blah/57/</span><span class="delimiter">&quot;</span></span> <span class="attribute-name">title</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">2008-01-24T22:24:17Z</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span><span class="tag">&lt;span&gt;</span>January 24th, 2008<span class="tag">&lt;/span&gt;</span><span class="tag">&lt;/a&gt;</span><span class="tag">&lt;/span&gt;</span>
        par <span class="tag">&lt;span</span> <span class="attribute-name">class</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">author</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span><span class="tag">&lt;a</span> <span class="attribute-name">href</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">http://ptitgraig.github.io/john/</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span>John Resig<span class="tag">&lt;/a&gt;</span><span class="tag">&lt;/span&gt;</span>

    <span class="tag">&lt;/small&gt;</span>
<span class="tag">&lt;/li&gt;</span>
<span class="tag">&lt;li</span> <span class="attribute-name">class</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">entry</span><span class="delimiter">&quot;</span></span> <span class="attribute-name">id</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">post57</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span>
    <span class="tag">&lt;p&gt;</span>Lorem ipsum<span class="tag">&lt;/p&gt;</span>
    <span class="tag">&lt;small</span> <span class="attribute-name">class</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">extra</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span>
        Posté il y a <span class="tag">&lt;span</span> <span class="attribute-name">class</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">time</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span><span class="tag">&lt;a</span> <span class="attribute-name">href</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">http://ptitgraig.github.io/2008/01/blah/57/</span><span class="delimiter">&quot;</span></span> <span class="attribute-name">title</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">2008-01-14T22:24:17Z</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span><span class="tag">&lt;span&gt;</span>January 14th, 2008<span class="tag">&lt;/span&gt;</span><span class="tag">&lt;/a&gt;</span><span class="tag">&lt;/span&gt;</span>
        par <span class="tag">&lt;span</span> <span class="attribute-name">class</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">author</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span><span class="tag">&lt;a</span> <span class="attribute-name">href</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">http://ptitgraig.github.io/john/</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span>John Resig<span class="tag">&lt;/a&gt;</span><span class="tag">&lt;/span&gt;</span>
    <span class="tag">&lt;/small&gt;</span>
<span class="tag">&lt;/li&gt;</span>
<span class="tag">&lt;li</span> <span class="attribute-name">class</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">entry</span><span class="delimiter">&quot;</span></span> <span class="attribute-name">id</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">post57</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span>
    <span class="tag">&lt;p&gt;</span>Lorem ipsum<span class="tag">&lt;/p&gt;</span>
    <span class="tag">&lt;small</span> <span class="attribute-name">class</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">extra</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span>
        Posté il y a <span class="tag">&lt;span</span> <span class="attribute-name">class</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">time</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span><span class="tag">&lt;a</span> <span class="attribute-name">href</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">http://ptitgraig.github.io/2008/01/blah/57/</span><span class="delimiter">&quot;</span></span> <span class="attribute-name">title</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">2008-01-04T22:24:17Z</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span><span class="tag">&lt;span&gt;</span>January 4th, 2008<span class="tag">&lt;/span&gt;</span><span class="tag">&lt;/a&gt;</span><span class="tag">&lt;/span&gt;</span>
        par <span class="tag">&lt;span</span> <span class="attribute-name">class</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">author</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span><span class="tag">&lt;a</span> <span class="attribute-name">href</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">http://ptitgraig.github.io/john/</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span>John Resig<span class="tag">&lt;/a&gt;</span><span class="tag">&lt;/span&gt;</span>
    <span class="tag">&lt;/small&gt;</span>
<span class="tag">&lt;/li&gt;</span>
<span class="tag">&lt;li</span> <span class="attribute-name">class</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">entry</span><span class="delimiter">&quot;</span></span> <span class="attribute-name">id</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">post57</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span>
    <span class="tag">&lt;p&gt;</span>Lorem ipsum<span class="tag">&lt;/p&gt;</span>
    <span class="tag">&lt;small</span> <span class="attribute-name">class</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">extra</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span>
        Posté il y a <span class="tag">&lt;span</span> <span class="attribute-name">class</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">time</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span><span class="tag">&lt;a</span> <span class="attribute-name">href</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">http://ptitgraig.github.io/2008/01/blah/57/</span><span class="delimiter">&quot;</span></span> <span class="attribute-name">title</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">2007-12-15T22:24:17Z</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span><span class="tag">&lt;span&gt;</span>December 15th, 2008<span class="tag">&lt;/span&gt;</span><span class="tag">&lt;/a&gt;</span><span class="tag">&lt;/span&gt;</span>
        par <span class="tag">&lt;span</span> <span class="attribute-name">class</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">author</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span><span class="tag">&lt;a</span> <span class="attribute-name">href</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">http://ptitgraig.github.io/john/</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span>John Resig<span class="tag">&lt;/a&gt;</span><span class="tag">&lt;/span&gt;</span>
    <span class="tag">&lt;/small&gt;</span>
<span class="tag">&lt;/li&gt;</span>
<span class="tag">&lt;/ul&gt;</span>

<span class="tag">&lt;/body&gt;</span>
<span class="tag">&lt;/html&gt;</span>
</pre></div>
</div>
</div>

<p>Dans un exemple non statique, on supprimerait le paramètre de <code>prettyDate.update</code>. Globalement, la refactorisation est une énorme amélioration par rapport à l’exemple initiale. Grâce au module <code>prettyDate</code> que nous avons conçu, nos pouvons même y ajouter d’avantage de fonctionnalités sans polluer la scope globale.</p>

<h2 id="conclusion">Conclusion</h2>

<p>Le test JavaScript n’est pas seulement une affaire d’utiliser un exécuteur de test et écrire quelques tests; cela demande habituellement des changements structurel assez lourds quand il s’agit de code qui n’a été testé auparavant que manuellement. Nous avons suivi pas à pas un exemple de comment changer la structure du code d’un module existant pour exécuter des tests dessus, en utilisant un framework de test adapté. Puis nous avons remplacer ce framework par un autre qui possède plus de fonctionnalités et nous donne des retours visuels.
QUnit a beaucoup à offrir : test de code asynchrone tel que les <code>timeouts</code>, AJAX et les événements. Son exécuteur de test visuel nous aide à débugger le code en rendant facile la ré-exécution de tests spécifique et en fournissant des piles de traces pour les assertions qui ont échoués et les exceptions qui ont été attrapées. Pour aller plus loin, lisez le livre QUnit Cookbook.</p>

<p class="disclaimer">
Cet article est traduit de l'anglais à partir d'un article paru sur Smashing Magazine. J'ai donc tâché de rester fidèle à l'opinion de l'auteur. Par moments, les formulations ont du être tournée autrement afin de faciliter la lecture et la compréhension. Pour toute amélioration ou suggestion, n'hésitez pas à me contacter.<br />
</p>

<div class="footnotes">
  <ol>
    <li id="fn:1">
      <p>Un assertion est un énoncé considéré comme vrai, ou une affirmation.<a href="#fnref:1" rel="reference">&#8617;</a></p>
    </li>
    <li id="fn:2">
      <p>Proof-Of-Concept est un moyen d’éprouver une solution. En génie logiciel, généralement, on crée un petit programme pour éprouver qu’une idée est viable.<a href="#fnref:2" rel="reference">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Les pours et contres des frameworks JS]]></title>
    <link href="http://ptitgraig.github.io/blog/2015/01/05/les-pours-et-contres-des-frameworks-js/"/>
    <updated>2015-01-05T18:04:00+01:00</updated>
    <id>http://ptitgraig.github.io/blog/2015/01/05/les-pours-et-contres-des-frameworks-js</id>
    <content type="html"><![CDATA[<p class="foreword">
Les pours et les contres des framework BackboneJS, AngularJS, EXTJS, EmberJS : pour t'aider à choisir dans cette jungle.
</p>
<!-- more -->

<h2 id="backbonejs">Backbone.js</h2>

<p>Pours :</p>

<ul>
  <li>
    <p>Simplicité - seulement 4 composants (Collection, Model, View, Router).</p>
  </li>
  <li>
    <p>Très grosse communauté et beaucoup de solutions sur Stackoverflow.</p>
  </li>
  <li>
    <p>Couche supérieures codés intelligemment comme Marionnette et Vertebae.</p>
  </li>
  <li>
    <p>L’architecture de ton application peut être personnalisée.</p>
  </li>
  <li>
    <p>Léger et mis à jour régulièrement. S’entend bien avec Underscore, jQuery/Zepto - des librairies très répendues.</p>
  </li>
  <li>
    <p>Fourni un niveau d’ abstraction suffisant avec prise de position raisonnable, permettant une adapation au plus proche des besoins du projet.</p>
  </li>
  <li>
    <p>Facile à prendre en main, offrant un bon tremplin pour les framework MV* Javascript.</p>
  </li>
  <li>
    <p>Compatibilité avec d’anciens navigateurs : IE7, 8 t même 6 (on osera tout de même pas aller jusque là).</p>
  </li>
</ul>

<p>Contres :</p>

<ul>
  <li>
    <p>La méthode extend copie le contenu de l’objet parent dans une nouvel objet. Bénéficier de l’héritage prototypal aurait été préférable.</p>
  </li>
  <li>
    <p>Manque de cas réel d’utilisation dans la documentation</p>
  </li>
  <li>
    <p>L’application TODO met le pied à l’étrier mais il y a encore beaucoup à apprendre après pour construire de grosses applications.</p>
  </li>
  <li>
    <p>La quantité de didacticiels sur comment faire les choses avec Backbone n’est pas cohérente et décrivrent des choses à différentes périodes de la vie de Backbone. Dand une équipe, des développeurs peuvent coder les choses à la façcon Backbone 0.3 alors que nous en sommes à une version antérieur à 1.</p>
  </li>
  <li>
    <p>Quelques reserves sur Backbone.sync qui pose contient dans son code des hypothèses concernant les communications typique HTTP déclenché par un clien. Ca ne s’adapte pas bien à la nature des WebSockets.</p>
  </li>
  <li>
    <p>Il n’y a pas, par défaut, de binding de view. Un re-rendu de la view alors qu’une simple propriété change semble être un peu du gâchi.</p>
  </li>
</ul>

<h2 id="angularjs">Angular.js</h2>

<p>Pours : </p>

<ul>
  <li>
    <p>Two-way data binding (système de liaison des données en deux sens) est extremement puissant. On pense donc d’avantage au model et à son état qu’à une série d’événements à déclencher. Le model est la seul source de vérité.</p>
  </li>
  <li>
    <p>Performance. AngularJS coûte peu en téléchargement. Son moteur de template utilise les noeuds du DOM au lieu de convertir des String en noeud. Ce qui doit améliorer les performances.</p>
  </li>
  <li>
    <p>Si tu cibles les navigateurs récents et que tu ne te soucis pas, ou peu, des anciens navigateurs, tu peux supprimer jQuery de tes dépendances.</p>
  </li>
  <li>
    <p>Intuitif, excellente documentation. Système de liaison des données ingénieux : Vue (view) HTML, portées (scope) imbriquées.</p>
  </li>
  <li>
    <p>Une extension Chrome, Batarang, qui fourni un accès en direct aux structures de données Angular.</p>
  </li>
  <li>
    <p>Minimisation du code de réutilisable (boilerplate code). Permet la réutilisation du code grâce à des composants. Etend la syntaxe HTML de sorte que de nombreuses fonctionnalités complexes finissent par êre aussi simple que la mise en place d’une directive (attribut) dans le code HTML. </p>
  </li>
  <li>
    <p>Très facilement testable grâce au système d’injection de dépendance.</p>
  </li>
  <li>
    <p>Ecrire une application complexe dans jQuery qui manipule le DOM : c’est déjà un petit exploit.</p>
  </li>
</ul>

<p>Contres :</p>

<ul>
  <li>
    <p>On ne peut pas, d’une manière simplement déclarative, spécifier une transition pour un changement d’UI qui vient d’un changement dans le model.</p>
  </li>
  <li>
    <p>Courbe d’apprentissage plus raide que Backbone, mais le gain est appréciable. </p>
  </li>
  <li>
    <p>La documentation pourrait être améliorée.</p>
  </li>
</ul>

<p>Largement inspiré de l’article de Smashing Magazine : 
<a href="http://www.smashingmagazine.com/2012/07/27/journey-through-the-javascript-mvc-jungle/">Journey Through The JavaScript MVC Jungle</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[S'y retrouver dans les outils de test Javascript]]></title>
    <link href="http://ptitgraig.github.io/blog/2015/01/05/sy-retrouver-dans-les-outils-de-test-javascript/"/>
    <updated>2015-01-05T14:21:00+01:00</updated>
    <id>http://ptitgraig.github.io/blog/2015/01/05/sy-retrouver-dans-les-outils-de-test-javascript</id>
    <content type="html"><![CDATA[<p class="foreword">
Entre Jasmine, Sinon.js, Karma, QUnit tu ne sais plus où donner de la tête ? Voici un bref récapitulatif des outils pour tester du Javascript.
Cet article sera enrichi au fur et à mesure des mes connaissances sur les sujets.
</p>
<!-- more -->

<h2 id="dfinitions">Définitions</h2>

<h3 id="test-driven-development-tdd">Test-Driven Development (TDD)</h3>

<p>Le Test Driven Development (TDD) ou en français développement piloté par les tests est une technique de développement de logiciel qui préconise d’écrire les tests unitaires avant d’écrire le code source d’un logiciel <sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>.</p>

<p>Le cycle préconisé par TDD comporte 5 étapes :</p>

<ol>
  <li>écrire un premier test;</li>
  <li>vérifier qu’il échoue (car le code qu’il teste n’existe pas), afin de vérifier que le test est valide;</li>
  <li>écrire juste le code suffisant pour passer le test;</li>
  <li>vérifier que le test passe;</li>
  <li>puis refactoriser le code.</li>
</ol>

<p>Les intérêts :</p>

<ul>
  <li>facilite la production de code valide en toutes circonstances</li>
  <li>on utilise le programme avant même qu’il existe</li>
  <li>évite des erreurs de conceptions dues à la précipitation avant d’avoir défini les objectifs</li>
  <li>plus grande assurance lors du refactoring, tu sais que les tests ont fonctionné à un moment donné. Tu peux ainsi te permettre des changements radicaux dans le code</li>
</ul>

<p>Une chose importante est que les demandeurs doivent formaliser la manière dont ils testeront la fonctionnalité. C’est le travail du responsable applicatif de s’en assurer.</p>

<h3 id="behavior-driven-development-bdd">Behavior-Driven Development (BDD)</h3>

<p>Behavior Driven Development (ou BDD) est une méthode Agile qui encourage la collaboration entre les développeurs, les responsables qualités, les intervenants non-techniques et les entreprises participant à un projet de logiciel. Il a été conçu en 2003 par Dan North comme une réponse au Test Driven Development. <sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup></p>

<p>Le processus BDD met en avant le langage naturel et les interactions dans le processus de développement logiciel. Les développeurs utilisant le BDD utilisent leur langue maternelle en combinaison avec le langage du domaine Domaine Driven Design pour décrire l’objectif et le bénéfice de leur code. Cela permet aux développeurs de se concentrer sur les raisons pour lesquelles le code doit être créé, plutôt que les détails techniques, et minimise la traduction entre le langage technique dans lequel le code est écrit et le domaine de la langue parlée par les entreprises, les utilisateurs, les intervenants, la gestion de projet etc…</p>

<p>Dans la pratique :</p>

<ul>
  <li>on utilise des exemples pour décrire le comportement de la demande;</li>
  <li>on automatise ces exemples pour fournir rapidement des commentaires ou tests de non-regression;</li>
  <li>on utilise le mot ‘devrait’, ce qui contribue à clarifier la résponsabilité et permet la remise en cause de la fonctionnalité de l’application;</li>
  <li>on utilise ‘verifier que’, ce qui permet de faire la différence entre les résultats provenant du champ d’application du code et d’autres éléments du code;</li>
  <li>on utilise des ‘mocks’ (fausse fonction) en remplacant des modules de code qui ne sont pas encore écrits.</li>
</ul>

<h3 id="les-bibliotques-dnoncs-assertions-library">Les bibliotèques d’énoncés (assertions library)</h3>

<p>Une assertion est un énoncé considéré comme vrai. Les bibliothèques d’énoncés permettent de formuler les tests de manière compréhensible.
Quelques bibliothèques d’énoncés :
* should.js
* expect.js
* chai.js</p>

<h3 id="les-frameworks-de-test">Les frameworks de test</h3>

<p>Un framework de test engloble une ou plusieurs bibliothèques d’énoncés, permet de lancer des tests.</p>

<p>A compléter…</p>

<h2 id="les-outils">Les outils</h2>

<h3 id="jasmine">Jasmine</h3>

<p><img class="left" src="/images/test-jasmine.png" width="140" height="140">
Jasmine est un <em>framework de test</em> JavaScript developpement orienté comportement (BDD). Il ne dépend d’aucun autre framework JavaScript.
Il ne requiert pas un DOM et possède une syntaxe propre et évidente, ce qui permet d’écrire facilement tes tests.</p>

<h3 id="mocha">Mocha</h3>

<p><img class="left" src="/images/test-mocha.png" width="140" height="140">
Mocha est un <em>framework de test</em> JavaScript riche en fonctionnalités, basé sur Node.js et sur le navigateur, qui rend les tests asynchrones simple et agréable. Les tests Mocha se déroulent de manière séquentielle, ce qui permet d’établir un rapporte précis et flexible, tout en faisant concorder les exceptions non interceptées au bon cas de test.</p>

<h3 id="karma-anciennement-testacular">Karma (anciennement Testacular)</h3>

<p><img class="left" src="/images/test-karma.png" width="140" height="140">
Karma est un <em>environnement de test</em>. Le but principal de Karma est d’offrir aux développeurs un environnement de test productif. Plutôt que de demander de mettre en place tout un tas de configurations, Karma te permet d’écire le code est d’obtenir un retour instantané de tes tests. La philosphie de Karma est : une retour rapide sur ton code, c’est ce qui te rend productif et créatif. C’est une opinion.</p>

<p>Karma est essentiellement un outil qui génère un serveur Web qui exécute le code source en se basant sur le code de test, et ce pour chaque navigateurs connectés. Les résultats de chaque test contre sur chaque navigateur sont calculées et affichées sur la ligne de commande de telle sorte que tu puisses voir quels sont les tests qui ont réussis et échoués, et ce sur chaque navigateur.
Tu peux tester le résulat sur un navigateur soit manuellement, en visitant l’URL écoutée par le serveur Karma (habituellement http://localhost:9876/), soit
automatiquement en configurant Karma de sorte qu’il sache quel navigateur démarrer quand Karma est exécuté.</p>

<p>Karma surveille aussi tous les fichiers listés dans le fichier de configuration. Dès qu’un fichier change, Karma déclenche les tests en envoyant un signal 
au serveur de test pour informer tout les navigayeurs connectés d’executer le code de test à nouveau. Chaque navigateur charge ensuite le code source dans une IFrame, exécute les tests, et rapporte les résultats au serveur.
Le serveur collecte les résultats de l’ensemble des navigateurs connectés et te les présente.</p>

<h3 id="intern">Intern</h3>

<p><img class="left" src="/images/test-intern.png" width="140" height="140">
Intern est <em>une pile de test complète pour Javascript</em>, conçue pour t’aider à écrire et exécuter des cas de test, pour applications et biblothèques de scripts, cohérent et de haute qualité. Intern peut être utilisé pour tester n’importe quel code JavaScript. Ses capacités de test fonctionnel peuvent même être utilisé pour tester des applications mobile et web non JavaScript - si tu le veux vraiment.</p>

<h3 id="sinonjs">sinon.js</h3>

<p>Espions de test autonome et mocks pour JavaScript.
Aucune dépendances, fonctionne avec n’importe quel framework JavaScript.
Un espion de test est une fonction qui enregistre les paramètres, retourne la valeur de <code>this</code> et l’exception levée - si présente.
Un espion de test peut être une fonction anonyme ou peut être encapsuler dans une autre fonction.</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="string"><span class="delimiter">&quot;</span><span class="content">test should call subscribers on publish</span><span class="delimiter">&quot;</span></span>: <span class="keyword">function</span> () {
    <span class="keyword">var</span> callback = sinon.spy();
    PubSub.subscribe(<span class="string"><span class="delimiter">&quot;</span><span class="content">message</span><span class="delimiter">&quot;</span></span>, callback);

    PubSub.publishSync(<span class="string"><span class="delimiter">&quot;</span><span class="content">message</span><span class="delimiter">&quot;</span></span>);

    assertTrue(callback.called);
}
</pre></div>
</div>
</div>

<h3 id="shouldjs">should.js</h3>

<p>Enoncés (assertions) de style Behavior-Driven-Developemnt (BDD) pour Node.js, indépendant de tout framework de test.</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="keyword">var</span> should = require(<span class="string"><span class="delimiter">'</span><span class="content">should</span><span class="delimiter">'</span></span>);

<span class="keyword">var</span> user = {
    <span class="key">name</span>: <span class="string"><span class="delimiter">'</span><span class="content">tj</span><span class="delimiter">'</span></span>
  , <span class="key">pets</span>: [<span class="string"><span class="delimiter">'</span><span class="content">tobi</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">loki</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">jane</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">bandit</span><span class="delimiter">'</span></span>]
};

user.should.have.property(<span class="string"><span class="delimiter">'</span><span class="content">name</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">tj</span><span class="delimiter">'</span></span>);
user.should.have.property(<span class="string"><span class="delimiter">'</span><span class="content">pets</span><span class="delimiter">'</span></span>).<span class="keyword">with</span>.lengthOf(<span class="integer">4</span>);

<span class="comment">// Si l'objet a été créé avec Object.create(null)</span>
<span class="comment">// alors il n'hérite pas de `Object.prototype`, donc il n'aura pas une getter `.should`</span>
<span class="comment">// donc tu peux faire :</span>
should(user).have.property(<span class="string"><span class="delimiter">'</span><span class="content">name</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">tj</span><span class="delimiter">'</span></span>);

<span class="comment">// aussi, tu peux tester de cette manières les `null`</span>
should(<span class="predefined-constant">null</span>).not.be.ok;

someAsyncTask(foo, <span class="keyword">function</span>(err, result){
  should.not.exist(err);
  should.exist(result);
  result.bar.should.equal(foo);
});
</pre></div>
</div>
</div>

<h3 id="expectjs">expect.js</h3>

<p>Outils d’enoncés minimalistes de style BDD pour Node.JS et pour navigateurs, basé sur should.js</p>

<ul>
  <li>Cross-browser : fonctionne sur IE6+, Firefox, Safari, Chrome, Opera.</li>
  <li>Compatible avec tous les frameworks de test.</li>
  <li>Prête pour Node.JS (require(‘expect.js’)).</li>
  <li>Autonome. Global seule sans extensions de prototype ou brique (shims)</li>
</ul>

<div><div class="CodeRay">
  <div class="code"><pre>expect(window.r).to.be(<span class="predefined-constant">undefined</span>);
expect({ <span class="key">a</span>: <span class="string"><span class="delimiter">'</span><span class="content">b</span><span class="delimiter">'</span></span> }).to.eql({ <span class="key">a</span>: <span class="string"><span class="delimiter">'</span><span class="content">b</span><span class="delimiter">'</span></span> })
expect(<span class="integer">5</span>).to.be.a(<span class="string"><span class="delimiter">'</span><span class="content">number</span><span class="delimiter">'</span></span>);
expect([]).to.be.an(<span class="string"><span class="delimiter">'</span><span class="content">array</span><span class="delimiter">'</span></span>);
expect(window).not.to.be.an(Image);
</pre></div>
</div>
</div>

<h3 id="chaijs">chai.js</h3>

<p><img class="left" src="/images/test-chai.png" width="140" height="140">
Chai est une bibliothèque d’énoncés BDD / TDD pour node.js et les navigateurs qui peut être couplé à n’importe quel framework de test JavaScript</p>

<h3 id="qunit">qUnit</h3>

<p>A venir.</p>

<div class="footnotes">
  <ol>
    <li id="fn:1">
      <p>http://fr.wikipedia.org/wiki/Test_Driven_Development<a href="#fnref:1" rel="reference">&#8617;</a></p>
    </li>
    <li id="fn:2">
      <p>http://fr.wikipedia.org/wiki/Behavior_Driven_Development<a href="#fnref:2" rel="reference">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[La base de Spring MVC]]></title>
    <link href="http://ptitgraig.github.io/blog/2015/01/05/la-base-de-spring-mvc/"/>
    <updated>2015-01-05T12:49:00+01:00</updated>
    <id>http://ptitgraig.github.io/blog/2015/01/05/la-base-de-spring-mvc</id>
    <content type="html"><![CDATA[<p class="foreword">
Fonctionnement basique du framework JAVA Spring MVC. Très bon pour la culture générale d'un développeur front.
</p>
<!-- more -->

<h2 id="fonctionnement">Fonctionnement</h2>

<p>Le framework Spring Web MVC est conçu autour d’une DispatcherServlet qui gère toutes les requêtes et réponses HTTP. Illustration ci-dessous :</p>

<p><img src="/images/spring_dispatcherservlet.png"></p>

<ol>
  <li>
    <p>Après avoir reçu une requête HTTP, DispatchServlet consulte le HandlerMapping pour appeler le Controller approprié.</p>
  </li>
  <li>
    <p>Le Controller analyse la requête et apelle le la méthode du service appropriée, basé l’utilisation des méthodes POST ou GET. La méthode du service initialisera les données du model sur la base d’une logique business puis retournera ne nom de la vue à la DispatcherServlet</p>
  </li>
  <li>
    <p>La DispatcherServlet s’appuiera sur la ViewResolver pour choisir la bonne vue pour la requête</p>
  </li>
  <li>
    <p>Une fois que la vue est finalisée, la DispatcherServlet passe les données du model à la vue, cette dernière étant finalement affichée sur le navigateur.</p>
  </li>
</ol>

<p>Tous les composants mentionnés ci-dessus (HandlerMapping, Controller et ViewResolver) font partis du WebApplicationContext, lequel est une extention du ApplicationContext auquel on a ajouté quelques caractéristiques supplémentaires pour les applications web.</p>

<h2 id="spring-mvc-pour-faire-du-rest">Spring MVC pour faire du REST</h2>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Comment bien calculer le poids d'un selecteur CSS]]></title>
    <link href="http://ptitgraig.github.io/blog/2014/06/18/comment-bien-calculer-le-poids-dun-selecteur-css/"/>
    <updated>2014-06-18T10:13:00+02:00</updated>
    <id>http://ptitgraig.github.io/blog/2014/06/18/comment-bien-calculer-le-poids-dun-selecteur-css</id>
    <content type="html"><![CDATA[<p class="foreword">
Voici un article qui vous expliquera le poids des CSS. Cela est utile quand vous voulez surcharger un style, comprendre quel style s'applique à quel élément et pourquoi un style s'applique plutôt qu'un autre.
</p>
<!-- more -->

<p>Quand vous reprenez un projet existant, qui date déjà un peu, vous vous retrouvez souvent avec des déclarations CSS à rallonge et ne savait plus quoi s’applique à quoi.</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="class">.container</span> <span class="class">.info</span><span class="class">.test</span> <span class="class">.spanner</span> <span class="class">.wrapper</span> <span class="class">.block</span> <span class="tag">div</span><span class="class">.pictos</span> <span class="id">#jailanausee</span> { <span class="key">color</span> : <span class="color">#000</span>; }
</pre></div>
</div>
</div>

<p>Pour éviter je genre de massacre, il est d’une extrème importance de comprendre quel style va s’appliquer à quel élement, et dans quel ordre.
Prenons un exemple. Parmi ces quelques déclarations, laquelle va remporter le combat et s’appliquer au span. Quelle va être la couleur du texte du span : rouge, bleu, vert ou jaune ?</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="id">#idSpan</span> { <span class="key">color</span>: <span class="value">red</span>; }
<span class="tag">span</span><span class="class">.class-span</span> { <span class="key">color</span>: <span class="value">orange</span>; }
<span class="class">.bloc</span><span class="class">.info</span> <span class="tag">span</span> { <span class="key">color</span>: <span class="value">yellow</span>; }
<span class="class">.container</span> <span class="class">.bloc</span><span class="class">.info</span> <span class="class">.class-txt</span> <span class="tag">span</span><span class="class">.class-span</span> { <span class="key">color</span>: <span class="value">green</span>; }
<span class="tag">span</span> { <span class="key">color</span>: <span class="value">blue</span> <span class="important">!important</span> }
</pre></div>
</div>
</div>

<div><div class="CodeRay">
  <div class="code"><pre><span class="tag">&lt;div</span> <span class="attribute-name">class</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">container</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span>
    <span class="tag">&lt;div</span> <span class="attribute-name">class</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">block info</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span>
        <span class="tag">&lt;span</span> <span class="attribute-name">class</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">class-span</span><span class="delimiter">&quot;</span></span> <span class="attribute-name">id</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">idSpan</span><span class="delimiter">&quot;</span></span> <span class="attribute-name">style</span>=<span class="string"><span class="delimiter">&quot;</span><span class="key">color</span>:<span class="value">purple</span>;<span class="delimiter">&quot;</span></span><span class="tag">&gt;</span>
            je suis d'une certaine couleur
        <span class="tag">&lt;/span&gt;</span>
    <span class="tag">&lt;/div&gt;</span>
<span class="tag">&lt;/div&gt;</span>
</pre></div>
</div>
</div>

<p>La réponse est bleu ! <a href="http://jsfiddle.net/ptitgraig/L8CUS/2/">La preuve ici</a>.</p>

<p>Voici un court explicatif de l’ordre d’application des styles sur le span.</p>

<table>
	
		<td>
			!important
		</td>
		<td>
			attribut style (style="")
		</td>
		<td>
			nombre d'id (#)
		</td>
		<td>
			nombre de classes (.)
		</td>
		<td>
			nombre de balises
		</td>
	
	<tr>
		<td>
			gagne sur tous les autres style, même seul
		</td>
		<td>
			0 .. n
		</td>
		<td>
			0 .. n
		</td>
		<td>
			0 .. n
		</td>
		<td>
			0 .. n
		</td>
	</tr>
</table>

<p>Au final, vous vous trouvez avec un chiffre entre 0 et 19999. Reprenons notre exemple de départ. Sachant que l’attribut style s’applique toujours et annule les autres, nous allons nous en affranchir pour l’exemple.</p>

<table>
	<tr>
		<th>Déclaration CSS</th>
		<th>!important</th>
		<th>nombre d'id (#)</th>
		<th>nombre de classes (.)</th>
		<th>nombre de balises</th>
		<th>poids</th>
	</tr>
	<tr>
		<td>#idSpan</td>
		<td>0</td>
		<td>1</td>
		<td>0</td>
		<td>0</td>
		<td>0100</td>
	</tr>
	<tr>
		<td>span.class-span</td>
		<td>0</td>
		<td>0</td>
		<td>1</td>
		<td>1</td>
		<td>0011</td>
	</tr>
	<tr>
		<td>.bloc.info span</td>
		<td>0</td>
		<td>0</td>
		<td>2</td>
		<td>1</td>
		<td>0021</td>
	</tr>
	<tr>
		<td>.container .bloc.info .class-txt span.class-span</td>
		<td>0</td>
		<td>0</td>
		<td>5</td>
		<td>1</td>
		<td>0051</td>
	</tr>
	<tr>
		<td>span (avec !important)</td>
		<td>1</td>
		<td>0</td>
		<td>0</td>
		<td>1</td>
		<td>1001</td>
	</tr>
</table>

<p>Au final vous voyez l’ordre d’importance se déssiner :</p>

<ol>
  <li>span (avec !important) /* 1001 */</li>
  <li>#idSpan /* 0100 */</li>
  <li>.container .bloc.info .class-txt span.class-span /* 0051 */</li>
  <li>.bloc.info span /* 0021 */</li>
  <li>span.class-span /* 0011 */</li>
</ol>

]]></content>
  </entry>
  
</feed>
